/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { NetworkFirst, StaleWhileRevalidate } from "workbox-strategies";
import { CacheFirst } from "workbox-strategies";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    (url.origin === self.location.origin &&
      (url.pathname.endsWith(".png") || url.pathname.endsWith(".ico"))) ||
    (url.origin === "https://assets.coingecko.com" &&
      url.pathname.endsWith(".png")),
  // || url.origin === "http://localhost:8080" ,
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: "images - stalewhilerevalidate",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// registerRoute(
//   // Add in any other file extensions or routing criteria as needed.
//   ({ url }) => url.origin === "https://dev-zjvem4dv.eu.auth0.com",
//   // || url.origin === "http://localhost:8080" ,
//   // Customize this strategy as needed, e.g., by changing to CacheFirst.
//   new StaleWhileRevalidate({
//     cacheName: "auth",
//     plugins: [
//       // Ensure that once this runtime cache reaches a maximum size the
//       // least-recently used images are removed.
//       new ExpirationPlugin({ maxEntries: 50 }),
//     ],
//   })
// );

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.

//Listner for push notifications
self.addEventListener("push", (event) => {
  const data = event?.data!.json();
  console.log("New notification", data);
  const options = {
    ...data,
  };
  console.log("options = ", options);
  event.waitUntil(self.registration.showNotification(data.title, options));
});

//Listen for notification click
self.addEventListener("notificationclick", function (event) {
  let url = event.notification.data.url;
  console.group("url =========== ", url);
  console.log("-------------this is a click ont notif");
  event.notification.close(); // Android needs explicit close.
  event.waitUntil(
    this.clients.matchAll({ type: "window" }).then((windowClients) => {
      // Check if there is already a window/tab open with the target URL
      for (var i = 0; i < windowClients.length; i++) {
        var client = windowClients[i];
        // If so, just focus it.
        if (client.url === url && "focus" in client) {
          return client.focus();
        }
      }
      // If not, then open the target URL in a new window/tab.
      if (this.clients.openWindow) {
        return this.clients.openWindow(url);
      }
    })
  );
});

//Cache First Strategy

// registerRoute(
//   ({request}) => {
//     const url = new URL(request.url);
//     if (url.origin === "https://assets.coingecko.com") {
//       return true;
//     } else {
//       return false;
//     }
//   },
//   new CacheFirst({
//     cacheName: "crypo logos"
//   })
// );

registerRoute(
  ({ request }) => request.destination === "style",
  new CacheFirst({
    cacheName: "style - cachefirst",
  })
);

registerRoute(
  ({ url }) =>
    (url.origin === process.env.REACT_APP_ENDPOINT_PROD &&
      url.pathname.endsWith("user")) ||
    (url.origin === process.env.REACT_APP_ENDPOINT_PROD &&
      url.pathname.endsWith("notifications")) ||
    (url.origin === process.env.REACT_APP_ENDPOINT_PROD &&
      url.pathname.endsWith("marketData")) ||
    (url.origin === process.env.REACT_APP_ENDPOINT_PROD &&
      url.pathname.endsWith("simplePrice")) ||
    (url.origin === process.env.REACT_APP_ENDPOINT_PROD &&
      url.pathname.endsWith("cryptos")) ||
    (url.origin === process.env.REACT_APP_ENDPOINT_PROD &&
      url.pathname.endsWith("currencies")) ||
    url.origin === "https://dev-zjvem4dv.eu.auth0.com/",
  new NetworkFirst({
    cacheName: "data - networkfirst",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// Trying to cache Auth0
// self.addEventListener('fetch', function(event) {
//   event.respondWith(
//     // try to return untouched request from network first
//     fetch(event.request.url, { mode: 'no-cors' }).catch(function() {
//       // if it fails, try to return request from the cache
//       return caches.match(event.request).then(function(response) {
//         if (response) {
//           return response;
//         }
//         // if not found in cache, return default offline content
//         if (event.request.headers.get('accept').includes('text/html')) {
//           return caches.match('sw-offline-content');
//         }
//       })
//     })
//   );
// });
